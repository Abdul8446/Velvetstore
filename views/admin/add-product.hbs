<div class="main-panel">
    <div class="content-wrapper">
        <div class="row">
            {{!-- -------------start content----------- --}}
            <div class="col-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Add Products</h4>
                        <form action="/admin/add-product" method="post" enctype="multipart/form-data">
                            <div class="form-group">
                                <label>Name</label>
                                <input type="text" name="name" class="form-control" placeholder="Name" required>
                            </div>
                            <div class="form-group">
                                <label>Description</label>
                                <textarea class="form-control" name="description" rows="4" placeholder="Description"
                                    required></textarea>
                            </div>
                            <div class="form-group mt-4">
                                <label for="">Category</label>
                                <ul class="nav nav-tabs" style="margin-bottom: 1px;" id="myTab" role="tablist">
                                    {{#each categories}}
                                    <li class="nav-item">
                                        <button class="test nav-link py-0 px-2" id="home-tab" data-toggle="tab"
                                            onclick="getSubCat('{{this._id}}')" role="tab" aria-controls="home"
                                            aria-selected="true">{{this.name}}</button>
                                    </li>
                                    {{/each}}
                                </ul>
                                <select id="catselect" class="col-lg-12 py-2" style="background: #2a3038"
                                    name="subCategory" required>
                                    <input id="catId" type="text" name="categoryId" hidden>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>MRP</label>
                                <input type="number" name="MRP" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label>Stock</label>
                                <input type="number" class="form-control" name="stock">
                            </div>
                            <div class="form-group">
                                <label>File upload</label>
                                <input id="fileInput" type="file" class="form-control" name="image" multiple required>
                            </div>
                            <button type="submit" class="btn btn-primary mr-2">Submit</button>
                            <button onclick="goback()" class="btn btn-dark">Cancel</button>
                        </form>
                        <canvas id="canvas"></canvas>
                        {{!-- <div style="display:none;">
                            <img id="source" [src]="url" width="300" height="227">
                        </div> --}}

                    </div>
                </div>
            </div>
            {{!-- ------------------end content---------------- --}}
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group row" id="test">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>



<script>
    function goback() {
        window.location.href = '/admin/products'
    }
    function getSubCat(id) {
        document.getElementById('catId').setAttribute('value', id)
        var table = document.getElementById('catselect')
        $.ajax({
            url: '/admin/get-sub-categories/' + id,
            method: 'get',
            success: (response) => {
                console.log(response)
                subs = response
                subId = response[0]._id
                console.log(subs)
                console.log(subId)
                console.log(response)
                var rows = ``
                for (var i = 0; i < subs.length; i++) {
                    var row = `<option>${subs[i].name}</option>`
                    rows = rows + row
                }
                table.innerHTML = rows
            }
        })
    }



    const input = document.getElementById('fileInput')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
        // const imagebox = []
        // const crop_btn = []
        // const confirm_btn = []
        const url = []
        const length = input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-3"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }

        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url, i) => {
            document.getElementById('image-box' + i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })

        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable


        // Displaying the image box
        //for(i=0;i<length;i++){
        //      document.getElementById('image-box'+i).style.display= 'block'
        //       document.getElementById('crop-btn'+i).style.display= 'block'
        //  }


        for (i = 0; i < length; i++) {
            cropper(img_data[i], document.getElementById('image' + i), i, document.getElementById('crop-btn' + i), document.getElementById('image-box' + i))
        }

        $('#exampleModal').modal('show')

        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('fileInput');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files
                    // Replace the original image file with the new cropped image file
                    // Hide the cropper box
                    //imagebox.style.display = 'none'
                    console.log(file)        

                    //document.getElementById(file.name).src = URL.createObjectURL(event.target.files[0])
                    
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });


</script>
